server.port=${SERVER_PORT}

# CLIENTS
client.auth.url=http://localhost:8090
client.rooms.url=http://localhost:8081/classroom
client.reservations.url=http://localhost:8083/reservations
client.groups.url=http://localhost:8085

service.rooms.mocked=${SERVICE_ROOMS_MOCKED}
service.groups.mocked=${SERVICE_GROUPS_MOCKED}
service.reservations.mocked=${SERVICE_RESERVATIONS_MOCKED}

## DATA SOURCE
## Set here configurations for the database connection
#spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/user
#spring.datasource.username=${POSTGRES_USER}
#spring.datasource.password=${POSTGRES_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
## Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.tomcat.test-while-idle=true
#spring.datasource.tomcat.validation-query=SELECT 1
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop
## Naming strategy
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
## Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


spring.datasource.url=jdbc:h2:mem:classes-db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.jpa.show-sql=true